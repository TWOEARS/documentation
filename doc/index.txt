
.. _index:

======================
Two!Ears documentation
======================

**Everything you need to know about Two!Ears.**

.. rubric:: Getting help

Having trouble? We'd like to help!

* Looking for specific information? Try
  the :doc:`detailed table of contents <contents>`.

* Search for information or post a question in the
  |TwoearsMailingList|.

* Report bugs or ask for new features in our `issue tracker`_.

.. _archives: http://groups.google.com/group/twoears/
.. _issue tracker: https://github.com/TWOEARS/TwoEars/issues

.. rubric:: First steps

New to Two!Ears or auditory modelling? This is the place to start!

* **Introduction:**
  :doc:`First steps <intro/index>` |
  :doc:`Installation <intro/install>` |
  :doc:`Two!Ears modular structure <intro/modules>`

* **Tutorial:**
  :doc:`Part 1: Setting up an acoustic scene <intro/tutorial-acoustic-scene>` |
  :doc:`Part 2: Setting up an auditory model <intro/tutorial-auditory-model>` |
  :doc:`Part 3: Working with the database <intro/tutorial-database>` |
  :doc:`Part 4: Use a robotic plattform <intro/tutorial-robot>`

.. rubric:: Binaural simulator

The Two!Ears Binaural Simulator enables you to create dynamic binaural ear
signals, that can be used by later parts of the model to actively explore a
scene.

* :doc:`Overview <binsim/index>`
* :doc:`Installation <binsim/install>`
* :doc:`Usage <binsim/usage>`
* :doc:`Examples <binsim/examples>`

.. rubric:: Robotic platform

If you have a robotic platform ready to record the binaural signals, no
simulation of them will be needed. Learn to set up your own robot below:

* :doc:`Getting started <robo/getting-started/index>`
* :doc:`Audio streaming <robo/audio-streaming/index>`

.. rubric:: Auditory front-end

The Two!Ears Auditory Front-End extracts all kinds of auditory cues from the ear
signals like the loudness or interaural differences. For detailed description
see:

* :doc:`Introduction <afe/index>`
* :doc:`Overview <afe/overview>`
* :doc:`Technical description <afe/description>`
* :doc:`Available processors <afe/processors>`
* :doc:`Add your own processor <afe/add-processor>`

.. rubric:: Blackboard system

The Two!Ears Blackboard System is the *brain* of the Two!Ears Auditory Model as
it provides a way to interpret the auditory cues and extract meaning from them.
Learn how this happens below:

* :doc:`Introduction <blackboard/introduction>`
* :doc:`Installation <blackboard/install>`
* :doc:`Usage <blackboard/usage>`
* :doc:`Blackboard architecture <blackboard/architecture>`
* :doc:`Knowledge sources <blackboard/knowledge-sources>`
* :doc:`Add your own knowledge source <blackboard/add-knowledge-sources>`

.. rubric:: Database

The Two!Ears Binaural Simulator and the Two!Ears Blackboard System uses a lot of
different data to perform their tasks. This is achieved by a large collection of
data:

* :doc:`Overview <database/index>`
* :doc:`Usage <database/usage>`
* :doc:`Experiment results <database/experiments>`
* :doc:`Impulse responses <database/impulse-responses>`
* :doc:`Sound databases <database/sound-databases>`
* :doc:`Stimuli <database/stimuli>`

.. rubric:: Examples

A key concept of the Two!Ears Auditory Model is reproducible research. Here, you
will find scripts show casing basic usage examples of the model or redoing
figures from our publications:

* :doc:`Overview <examples/index>`
* :doc:`Localisation with and without head rotation <examples/localisation>`
* :doc:`Localisation - looking at the results in detail
  <examples/localisation-details>`
* :doc:`(Re)train the localisation stage <examples/train-localisation>`

.. rubric:: Development

If you are part of the Two!Ears development team or would like to become part of
it, read on:

* :doc:`How to get involved <dev/index>`
* :doc:`Coding style guide <dev/coding-style-guide>`
* :doc:`Writing this documentation <dev/writing-documentation>`

.. vim: filetype=rst spell:
