
.. _index:

======================
Two!Ears documentation
======================

**Everything you need to know about Two!Ears.**

.. rubric:: Getting help

Having trouble? We'd like to help!

* Looking for specific information? Try
  the :doc:`detailed table of contents <contents>`.

* Search for information or post a question in the
  |TwoearsMailingList|.

* Report bugs or ask for new features in our `issue tracker`_.

.. _archives: http://groups.google.com/group/twoears/
.. _issue tracker: https://github.com/TWOEARS/TwoEars/issues

.. rubric:: First steps

New to Two!Ears or auditory modelling? This is the place to start!

* **Introduction:**
  :ref:`sec-first-steps` |
  :ref:`sec-install` |
  :ref:`sec-modules`

* **Tutorials:**
  :ref:`Part 1: Setting up an acoustic scene <sec-tutorial-acoustic-scene>` |
  :ref:`Part 2: Setting up an auditory model <sec-tutorial-auditory-model>` |
  :ref:`Part 3: Working with the database <sec-tutorial-database>` |
  :ref:`Part 4: Use a robotic plattform <sec-tutorial-robot>`

.. rubric:: Binaural simulator

The Two!Ears Binaural Simulator enables you to create dynamic binaural ear
signals, that can be used by later parts of the model to actively explore a
scene.

* :ref:`Overview <sec-binsim>`
* :ref:`sec-binsim-usage`
* :ref:`sec-binsim-examples`
* :ref:`sec-binsim-install`

.. rubric:: Robotic platform

If you have a robotic platform ready to record the binaural signals, no
simulation of them will be needed. Here you find the software you need to
connect Matlab with the robotic world:

* :ref:`sec-robot-getting-started`
* :ref:`sec-robot-audio-streaming`

.. rubric:: Auditory front-end

The Two!Ears Auditory Front-End extracts all kinds of auditory cues from the ear
signals like the loudness or interaural differences. For detailed description
see:

* :ref:`Introduction <sec-afe>`
* :ref:`sec-afe-overview`
* :ref:`sec-technical-description`
* :ref:`sec-afe-processors`
* :ref:`sec-afe-add-processor`

.. rubric:: Blackboard system

The Two!Ears Blackboard System is the *brain* of the Two!Ears Auditory Model as
it provides a way to interpret the auditory cues and extract meaning from them.
Learn how this happens below:

* :ref:`sec-blackboard-introduction`
* :ref:`sec-blackboard-install`
* :ref:`sec-blackboard-usage`
* :ref:`sec-blackboard-architecture`
* :ref:`sec-knowledge-sources`
* :ref:`sec-blackboard-add-knowledge-source`

.. rubric:: Database

The Two!Ears Binaural Simulator and the Two!Ears Blackboard System uses a lot of
different data to perform their tasks. This is achieved by a large collection of
data:

* :ref:`Overview <sec-database>`
* :ref:`sec-database-usage`
* :ref:`sec-experiments`
* :ref:`sec-impulse-responses`
* :ref:`sec-sound-databases`
* :ref:`sec-database-stimuli`

.. rubric:: Examples

A key concept of the Two!Ears Auditory Model is reproducible research. Here, you
will find scripts show casing basic usage examples of the model or redoing
figures from our publications:

* :ref:`Overview <sec-examples>`
* :ref:`sec-examples-localisation`
* :ref:`sec-examples-localisation-details`
* :ref:`sec-examples-train-localisation`

.. rubric:: Development

If you are part of the Two!Ears development team or would like to become part of
it, read on:

* :ref:`How to get involved <sec-dev>`
* :ref:`sec-coding-style-guide`
* :ref:`Writing this documentation <sec-writing-documentation>`
* :ref:`sec-git`

.. vim: filetype=rst spell:
