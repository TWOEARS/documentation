=====================
Writing documentation
=====================

An impact of Two!Ears on the research community should be the possibility to
reuse its code and to give other researcher the possibility to integrate their
models and benchmark them. To achieve this the documentation of the whole
Two!Ears Auditory Model is as important as the code itself.
This means we are not only working constantly on our code base, but on the
documentation as well.

Documentation changes generally come in two forms:

* General improvements: typo corrections, error fixes and better
  explanations through clearer writing and more examples.

* New features: documentation of features that have been added to the
  framework since the last release.

This section explains how writers can craft their documentation changes
in the most useful and least error-prone ways.

Getting the raw documentation
-----------------------------

Though Two!Ears' documentation is intended to be read as HTML or PDF at
http://twoears.eu/doc/, we edit it as a collection of text files for
maximum flexibility. These files live in the top-level ``doc/`` directory of a
Two!Ears release.

If you'd like to start contributing to our docs, get the development version of
Two!Ears from the source code repository
(see :ref:`installing-development-version`). The development version has the
latest-and-greatest documentation, just as it has latest-and-greatest code.

Getting started with Sphinx
---------------------------

Two!Ears' documentation uses the Sphinx__ documentation system, which in turn
is based on docutils__. The basic idea is that lightly-formatted plain-text
documentation is transformed into HTML, PDF, and any other output format.

__ http://sphinx-doc.org/
__ http://docutils.sourceforge.net/

To actually build the documentation locally, you'll currently need to install
Sphinx -- ``pip install Sphinx`` or ``sudo apt-get install python-sphinx`` should
do the trick.

.. note::

    To install Sphinx__ under Windows, do ...

Then, building the HTML is easy; just ``make html`` (or ``make.bat html`` on
Windows) from the ``docs`` directory.

To get started contributing, you'll want to read the :ref:`reStructuredText
Primer <sphinx:rst-primer>`. After that, you'll want to read about the
:ref:`Sphinx-specific markup <sphinx:sphinxmarkup>` that's used to manage
metadata, indexing, and cross-references.

Commonly used terms
-------------------

Here are some style guidelines on commonly used terms throughout the
documentation:

* **Two!Ears** -- use it in exactly this capitalization. When referring not to
  the whole project, but to its code or model use **Two!Ears Auditory Model**.

* **Two!Ears Binaural Simulator** -- when referring to the binaural simulator
  module of the Two!Ears Auditory Model.

* **Two!Ears Auditory Front-End** -- when referring to the auditory front-end
  module of the Two!ears Auditory Model.

* **Two!Ears Blackboard System** -- when referring to the blackboard
  architecture module of the Two!Ears Auditory Model.

* **Matlab** -- when referring to the language, capitalize Matlab.

* **localise**, **initialise**, etc. -- use the British "ise" suffix, not "ize."

Guidelines for reStructuredText files
-------------------------------------

These guidelines regulate the format of our reST (reStructuredText)
documentation and provide tips for writing them:

* In section titles, capitalize only initial words and proper nouns.

* Wrap the documentation at 80 characters wide, unless a code example
  is significantly less readable when split over two lines, or for another
  good reason.

* The order of headings is the following::

      =======
      Section
      =======

      Subsection
      ----------

      Subsubsection
      ~~~~~~~~~~~~~

      Paragraphs
      ^^^^^^^^^^

* The main thing to keep in mind as you write and edit docs is that the
  more semantic markup you can add the better. So::

      To remove ``README.md`` execute ``rm README.md``...

  Isn't nearly as helpful as::

      To remove :file:`README.md` execute :command:`rm README.md`...

  This is because Sphinx will generate proper links for the latter, which
  greatly helps readers. There's basically no limit to the amount of
  useful markup you can add.

* The file ending of the reST files should be ``*.txt`` instead of ``*.rst``
  this will force github to display them as raw text files. The downside is that
  you have to tell your editor that you are editing a reST file -- ``:setf rst``
  in vim.


Documenting new features
------------------------

Our policy for new features is:

    The actual documentation present in the master branch of the development
    repository should be always corresponding to the actual code/data that is
    present in the master branches of the single module repositories.


.. _improving-the-documentation:

Improving the documentation
---------------------------

Things to be done:


.. _documentation-spelling-check:

Spelling check
--------------

Before you commit your docs, it's a good idea to run the spelling checker.
You'll need to install a couple packages first:

* `pyenchant <https://pypi.python.org/pypi/pyenchant/>`_ (which requires
  `enchant <http://www.abisource.com/projects/enchant/>`_)

* `sphinxcontrib-spelling
  <https://pypi.python.org/pypi/sphinxcontrib-spelling/>`_

Then from the ``doc`` directory, run ``make spelling``. Wrong words (if any)
along with the file and line number where they occur will be saved to
:file:`_build/spelling/output.txt`.

If you encounter false-positives (error output that actually is correct), do
one of the following:

* Surround inline code or brand/technology names with grave accents (`).
* Find synonyms that the spell checker recognizes.
* If, and only if, you are sure the word you are using is correct - add it
  to :file:`doc/spelling_wordlist` (please keep the list in alphabetical order).

.. vim: filetype=rst spell:
