Usage
=====

This instructions guides you how to use the `Two!Ears Binaural Simulator`_, for
instructions on how to use the whole `Two!Ears Auditory Model`_ refer to ...

If you want to use the `Two!Ears Binaural Simulator`_ without any other part of
the `Two!Ears Auditory Model`_ you can start it as a single module with the
``startTwoEars`` function which is part of the
:doc:`Two!Ears Main module <../modules/main>`.

::
    startTwoEars('BinauralSimulator.xml');

Configuration
-------------

There are basically two ways for controlling and configuring the `Two!Ears
Binaural Simulator`_.
In both cases you will need audio files to create you acoustic scenes with it.
You could of course use your own audio files, but you can also use files from
the large `Two!Ears Database`_. In that case you only have to specify the
path of the desired files in the database and the `Two!Ears Binaural Simulator`_
will download them during processing. For further information on that have a
look at the :doc:`Introduction into the database <../database/index>.

Configuration using a Matlab script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `Two!Ears Binaural Simulator`_ uses the object-oriented programming
architecture of Matlab. In order to initialize the simulation tool, an Object
of the ``SimulatorConvexRoom()``-class has to be instantiated by::

    sim = simulator.SimulatorConvexRoom();

Note that the constructor returns a handle, which is the pendant to a reference
of an object in other programming language. Assigning ``sim`` to a another
variable does not copy the object. The simulation framework is depending on
a simulation kernel written in C++/MEX. It is not recommended to instantiate
more than one object of the ``SimulatorConvexRoom()``-class by calling the
constructor multiple times, since all objects would access the same simulation
kernel. To see all configurable parameters of the simulator call the object's
name in Matlab::

    >> sim

    sim =

      SimulatorConvexRoom with properties:

                    BlockSize: 4096
                   SampleRate: 44100
              NumberOfThreads: 1
                     Renderer: @ssr_binaural
                  HRIRDataset: [1x1 simulator.DirectionalIR]
                 MaximumDelay: 0.0500
                     PreDelay: 0
           LengthOfSimulation: 5
                      Sources: {[1x1 simulator.source.Point]  [1x1 simulator.source.Point]}
                        Sinks: [1x1 simulator.AudioSink]
                        Walls: []
        ReverberationRoomType: 'shoebox'
        ReverberationMaxOrder: 0

For a more detailed description of each parameter refer to the
`API documentation on the Simulator`_. In order to change various processing
parameters of the simulator the build-in set/get functionality of Matlab should
be used, e.g.

::

    % some processing parameters
    set(sim, ...
      'BlockSize', 4096, ...
      'SampleRate', 44100, ...
      'MaximumDelay', 0.05, ...
      'PreDelay', 0.0, ...
      'LengthOfSimulation', 5.0, ...
      'Renderer', @ssr_binaural, ...
      'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa') ...
      );

Line 3 and 4 set the sample rate of the simulator to 44.1 kHz and defines a block
size aka. frame size of 4096 Samples. To define the acoustic scene, e.g.
the sound sources and the listener.

::
    % acoustic scene
    set(sim, ...
      'Sources', {simulator.source.Point(), simulator.source.Point()}, ...
      'Sinks', simulator.AudioSink(2) ...
      );

Sound sources are stored in a cell array. Line 3 defines two point sources,
are created by calling the constructor of the ``simulator.source.Point``-class.
For the binaural simulation the parameter ``Sinks`` must contain only one object
of the ``simulator.AudioSink``-class describing the listener (Line 4). The
argument ``2`` in the constructor's call defines the number of input channel of
the sink, which is 2 for binaural signals. Since sources and sinks are also
handles, they can be accessed using the same set/get procedure as for the
simulator object, e.g.

::

    % set parameters of audio sources
    set(sim.Sources{1}, ...
      'AudioBuffer', simulator.buffer.FIFO(1), ...
      'Position', [1; 2; 1.75], ...
      'Name', 'Cello', ...
      'Volume', 0.4 ...
      );

    set(sim.Sources{2}, ...
      'AudioBuffer', simulator.buffer.FIFO(1), ...
      'Position', [1; -2; 1.75], ...
      'Name', 'Castanets' ...
      );

    % set parameters of head
    set(sim.Sinks, ...
      'Position' , [0; 0; 1.75], ...
      'UnitX', [1; 0; 0], ...
      'UnitZ', [0; 0; 1], ...
      'Name', 'Head' ...
      );

``Name`` defines an unique identifier for the scene object, which
should not be re-used for any other scene object. ``Position``
defines the position of the scene object in 3D Cartesian coordinates (measured
in meter). In order to emit sound from a sound sources, audio buffers have to be
respectively defined containing the sources' audio signals. A single-channel
FIFO-Buffer (First-In-First-Out) can be defined by ``simulator.buffer.FIFO(1)``.
For more details about possible buffer types please refer to the
`API documentation on buffers`_. To load a sound files into the buffers execute

::

    % set audio input of buffers
    set(sim.Sources{1}.AudioBuffer, ...
      'File', 'stimuli/anechoic/instruments/anechoic_cello.wav');

    set(sim.Sources{2}.AudioBuffer, ...
      'File', 'stimuli/anechoic/instruments/anechoic_castanets.wav');

All code snippets have been taken from example script :file:`test_binaural_wo.m`
located in ``./test``.

.. _API documentation on the Two!Ears Binaural Simulator: http://twoears.github.io/binaural-simulator-doc/classsimulator_1_1_simulator_interface.html
.. _API documentation on buffers: http://twoears.github.io/binaural-simulator-doc/namespacesimulator_1_1buffer.html

.. _XML scene description:

Configuration using XML Scene Description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In following the configuration as defined above using a Matlab script is done
calling the constructor of the simulator object with an extra argument defining
the filename of a XML scene description file.

::

    sim = simulator.SimulatorConvexRoom('test_binaural.xml');

The content of file:`test_binaural.xml` is shown below.

.. code:: xml
    <scene
      BlockSize="4096"
      SampleRate="44100"
      MaximumDelay="0.05"
      PreDelay="0.0"
      LengthOfSimulation="5.0"
      NumberOfThreads="1"
      Renderer="ssr_binaural"
      HRIRs="impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa">
      <source Position="1 2 1.75"
              Type="point"
              Name="Cello"
              Volume="0.4">
        <buffer ChannelMapping="1"
                Type="fifo"
                File="stimuli/anechoic/instruments/anechoic_cello.wav"/>
      </source>
      <source Position="1 -2 1.75"
              Type="point"
              Name="Castanets">
        <buffer ChannelMapping="1"
                Type="fifo"
                File="stimuli/anechoic/instruments/anechoic_castanets.wav"/>
      </source>
      <sink Position="0 0 1.75"
            UnitX="1 0 0"
            UnitZ="0 0 1"
            Name="Head"/>
    </scene>

Simulate Ear-Signals
--------------------

After setting up all parameters the simulator object is ready to simulate ear
signals according to the defined acoustic scene. In order to load all parameters
into the simulation kernel execute

::

    sim.set('Init',true);

Note, that all the processing parameters and objects' initial positions have to
be defined BEFORE initialization in order to initialize the simulation properly.
After the simulator has been initialized it is not possible to re-assign any
property of the simulator object. Hence the number of acoustic sources cannot be
changed within one simulation run. However, modifying e.g. the position of a
scene object is possible. The following loop calculates the ear signals until
the acoustic scene is finished.

::

    while ~sim.isFinished()
      sim.set('Refresh',true);  % refresh all objects
      sim.set('Process',true);
    end

The function ``sim.isFinished()`` yields true if the buffers of all sound sources
are empty or if ``sim.LengthOfSimulation`` has been reached. Note, that the
simulator is a block-wise processor: Each call of line 3 generates a block of
ear signals whose length is defined by ``sim.BlockSize``. Between two processing
steps, the properties of scene objects may be manipulated, e.g. the position of
a scene object is changed. If necessary, call line 2 once before processing a new
block in order to send any modification to the simulation kernel. The ear
signals are stored in the FIFO buffer of the ``sim.Sinks`` object.

::

    % read whole data from buffer
    data = sim.Sinks.getData();
    % save date into file
    sim.Sinks.saveFile('out_binaural.wav',sim.SampleRate);

In order to access or store the data line 2 or 4 may be used respectively. To
finish the simulation shut down and clean up the simulator by calling::

    sim.set('ShutDown',true);

The simulator reverts to an uninitialized state, where the manipulation of every
parameter is possible, again. This is necessary, if you want to start a new
simulation with complete different parameters like e.g. different number of
sound sources. If you want to start a new simulation with same parameters as
before a kind of a weak shut down should do the job::

    sim.set('ReInit',true);

Again, objects' initial positions have to be defined BEFORE re-initialization
in order to initialize the simulation properly. The simulator however remains in
an initialized state.

To get more hands on the `Two!Ears Binaural Simulator`_ have a look at the
:doc:`Examples use cases <examples>`.

.. vim: filetype=rst spell:
