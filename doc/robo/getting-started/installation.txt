.. _sec-robot-install:

Installation of the robotic tools
=================================

The robotic tools should be installed on any system that will host components of
the software architecture for the |robot|. This page details the installation
process. In addition, a :ref:`Matlab bridge <sec-install-matlab-bridge>` can be
installed on any other system to control the |robot| from a Matlab environment.

.. note::

    For all the guidelines gathered on this page other than :ref:`the Matlab
    bridge installation <sec-install-matlab-bridge>`, we will assume that you
    are using Ubuntu Linux as it is the supported distribution for |ROS| (but
    for the |GenoM3| tools, any other UNIX platform should work). We also assume
    that you use the :command:`bash` shell. If you use a different shell, you
    should adapt the shell-dependent commands accordingly.

.. contents::
    :local:

Install |ROS|
-------------

The distribution of |ROS| you can install will depend on your Ubuntu version:

* If you have Ubuntu 14.04 LTS or 13.10, follow the `ROS Indigo`_ installation
  instructions.
* Otherwise, follow the `ROS Hydro`_ installation instructions.

.. _ROS Indigo: http://wiki.ros.org/indigo/Installation/Ubuntu
.. _ROS Hydro: http://wiki.ros.org/hydro/Installation/Ubuntu

Install the |GenoM3| tools through robotpkg
-------------------------------------------

This section will guide you through the installation of |GenoM3| tools. Though
|GenoM3| is open-source software (available at https://git.openrobots.org/) and
can be compiled from source, the common installation uses robotpkg, a
compilation framework and packaging system for robotics software (more
information at http://robotpkg.openrobots.org/).

Get robotpkg on your system
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

     The following instructions invite you to download two git repositories. If
     the given URLs using ``git://`` protocol fail, try ``https://`` protocol as
     instructed `here <http://robotpkg.openrobots.org/install.html>`_ and `there
     <http://robotpkg.openrobots.org/robotpkg-wip.html>`_.

First, get the ``robotpkg`` repository in your home folder (or you can choose
another location, but we would recommend this one)::

    $ cd
    $ git clone git://git.openrobots.org/robots/robotpkg

You will also need the `wip <http://robotpkg.openrobots.org/robotpkg-wip.html>`_
subset of robotpkg, it contains some work in progress that is not officially
released, but already available::

    $ cd ~/robotpkg
    $ git clone git://git.openrobots.org/robots/robotpkg/robotpkg-wip wip

Next, set the installation path. The tools that you will soon install will be
placed in your home folder under a dedicated folder named ``openrobots`` (or you
can choose another location with a different prefix, but we would recommend this
one. Installing robotic components in your home folder ensures that you do not
need root privileges for the installation)::

    $ cd ~/robotpkg/bootstrap
    $ ./bootstrap --prefix $HOME/openrobots

To finish, update your environment variables to include the installation
folder:

.. note::

    In the following commands, note the use of an environment variable
    :envvar:`ROBOTPKG_BASE` to indicate your installation path, set to
    ``$HOME/openrobots``. If you have chosen a different location at the
    previous step, you should modify the corresponding command accordingly.

::

    $ echo >> ~/.bashrc
    $ echo "# ROBOTPKG" >> ~/.bashrc
    $ echo "export ROBOTPKG_BASE=$HOME/openrobots" >> ~/.bashrc
    $ echo "export PATH=$PATH:$ROBOTPKG_BASE/bin:$ROBOTPKG_BASE/sbin" >> ~/.bashrc
    $ echo "export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$ROBOTPKG_BASE/lib/pkgconfig" >> ~/.bashrc
    $ echo "export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$ROBOTPKG_BASE/src/ros-nodes:$ROBOTPKG_BASE/share" >> ~/.bashrc
    $ echo "export PYTHONPATH=$PYTHONPATH:$ROBOTPKG_BASE/lib/python2.7/site-packages:$ROBOTPKG_BASE/lib/python3.2/site-packages" >> ~/.bashrc
    $ echo "# ROBOTPKG END" >> ~/.bashrc
    $ source ~/.bashrc

.. _sec-install-robotpkg-package:

How to install a robotpkg package
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Your ``~/robotpkg`` directory contains a tree of packages, grouped into main
categories. In the next part, we will invite you to install some of those
packages. Here we expose you the guidelines to follow for each package.

1. **Add eventual options to the package**

    If you are asked to add options ``option-1 option-2 ...`` to the package
    ``pkg-name``, edit the file :file:`~/openrobots/etc/robotpkg.conf` and add a
    line (near the beginning for instance) looking like::

        PKG_OPTIONS.pkg-name+= option-1 option-2 ...

2. **Change to the package's diretory**

    You will be given the path to the package, such as
    ``robotpkg/<category>/<pkg-name>``. Change to this directory::

        $ cd ~/robotpkg/<category>/<pkg-name>

3. **Install eventual missing system dependencies**

    Run the following command to list the dependencies for the package you are
    about to install::

        $ make show-depends

    At the end of the command's output, the dependencies are separated into
    ``Robotpkg dependencies`` and ``System dependencies``. If any robotpkg
    dependency is missing, it will be automatically installed. If any system
    dependency is missing, you need to install it (commonly with
    :command:`apt-get` under Ubuntu).

    You may skip this step, but if a system dependency is missing, the package
    installation will stop at some point and you will be asked to install the
    missing dependency.

4. **Install the package**

    Run the following command::

        $ make update

    This will download the sources, compile them locally on your system, and
    install the output files in the ``~/openrobots`` directory.

Install the needed packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Install the package ``demo-genom3`` from ``robotpkg/wip/demo-genom3`` with
  options ``codels ros-server ros-client-ros ros-client-c``.

    This package will install the *demo* module. It is a sample component
    distributed with |GenoM3|, serving as an example of a |GenoM3| module. It
    simply controls the motion of a fictional robot. The aim of installing the
    *demo* module is twofold: first aim is to automatically install all the
    dependencies for using |GenoM3| with |ROS|; second one is to already have a
    |GenoM3| module ready to be run to test your installation (*c.f.* section
    :ref:`sec-test-install`). For your convenience, we give you here what
    applying the :ref:`above steps <sec-install-robotpkg-package>` could look
    like::

        $ echo "PKG_OPTIONS.demo-genom3+= codels ros-server ros-client-ros ros-client-c" >> ~/openrobots/etc/robotpkg.conf
        $ # or better, edit the file manually and add the line near the beginning

        $ cd ~/robotpkg/wip/demo-genom3

        $ make show-depends
        $ # Let's say that `make show-depends` revealed two missing system
        $ # dependencies named 'bison' and 'flex'. Next step would be:
        $ sudo apt-get install bison flex

        $ make update

* Install the packages ``genomix`` from ``robotpkg/net/genomix`` and ``rosix``
  from ``robotpkg/net/rosix``.

    genomix and rosix are HTTP servers providing an interface for some clients
    to control |GenoM3| modules and generic |ROS| nodes respectively.

* Install the packages ``tcl-genomix`` from ``robotpkg/wip/tcl-genomix`` and
  ``matlab-genomix`` from ``robotpkg/supervision/matlab-genomix``.

    These are clients of the genomix and rosix servers. The tcl-genomix client
    allows to control components using the Tcl language. The matlab-genomix
    client allows to control components from Matlab, its installation is
    optional. Section :ref:`sec-test-install` shows examples of use of those two
    clients.

    .. note::

        You need a Matlab installation on your system in order to install the
        ``matlab-genomix`` package. If you encounter a missing dependency for
        ``mex`` (the MEX compiler from Matlab), you need to add the path to
        Matlab executables to the :envvar:`PATH` environment variable. For
        example, with Matlab R2013a installed in ``/usr/local``, it would be
        done with::

            $ export PATH=$PATH:/usr/local/MATLAB/R2013a/bin

Keeping up-to-date
~~~~~~~~~~~~~~~~~~

If a new release is available for a package, you can update to newest content:

1. **Update the git repositories**

::

    $ cd ~/robotpkg
    $ git pull
    $ cd wip
    $ git pull

2. **Change to the package's repository and update the package**

::

    $ cd ~/robotpkg/<category>/<pkg-name>
    $ make update

.. _sec-test-install:

Test your installation
----------------------

.. warning::

    Section TBD. Simply links to two examples of use of the *demo* module, one
    with the Tcl client, one with the Matlab client. The examples will be under
    main section :ref:`sec-examples`.

Install a |GenoM3| module from the sources
------------------------------------------

Instructions
~~~~~~~~~~~~

The software part of the |robot| include several |GenoM3| modules. You may have
to install them from their source files. Each |GenoM3| module has its own
folder, containing a description file named after the module with the ``.gen``
extension (something like :file:`<module>.gen`). These steps will install the
module in your ``~/openrobots`` folder::

    $ cd <path to the module's folder>
    $ genom3 skeleton -i <module>.gen
    $ ./bootstrap.sh
    $ mkdir build && cd build
    $ ../configure --prefix=$ROBOTPKG_BASE --with-templates=ros/server,ros/client/ros,ros/client/c
    $ make install

Example: installing the |BASS| module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|BASS| is a :ref:`module for binaural audio streaming <sec-bass>`,
located in a folder named ``bass-genom3`` in the audio-streaming
repository. Applying the above commands to install |BASS| gives::

    $ cd <path to audio-stream-server-repo>/bass-genom3
    $ genom3 skeleton -i bass.gen
    $ ./bootstrap.sh
    $ mkdir build && cd build
    $ ../configure --prefix=$ROBOTPKG_BASE --with-templates=ros/server,ros/client/ros,ros/client/c
    $ make install

.. _sec-install-matlab-bridge:

Install the Matlab bridge on another platform
---------------------------------------------

.. warning::

    Section TBD. Have to test if the Matlab bridge could be installed on a Mac
    OS using robotpkg. Give specific instructions for Windows.

.. vim: filetype=rst spell:
.. emacs:
   Local Variables:
   mode: rst
   fill-column: 80
   End:
